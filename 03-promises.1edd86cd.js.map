{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAIpC,SAASC,EAAaC,GACpB,OAAO,IAAIC,SAAQ,SAAAC,G,OAAWC,WAAWD,EAASF,E,IAHpDJ,EAAKQ,iBAAiB,UAMtB,SAAoBC,GAClBA,EAAMC,iBAEN,IAAMC,EAAQC,SAASZ,EAAKa,SAASC,MAAMC,OACrCC,EAAOJ,SAASZ,EAAKa,SAASG,KAAKD,OACnCE,EAASL,SAASZ,EAAKa,SAASI,OAAOF,OAE7C,GAAIG,MAAMP,IAAUO,MAAMF,IAASE,MAAMD,GAEvC,YADAE,MAAM,sCAIR,IAAIC,EAAI,EAoBRjB,EAAaQ,GAAOU,MAlBpB,SAASC,IAqBX,IAAuBC,EAAUT,EApBzBM,GAAKH,IAoBUM,EAnBHH,EAmBaN,EAnBVH,GAASS,EAAI,GAAKJ,EAoBhC,IAAIX,SAAQ,SAACC,EAASkB,GACLC,KAAKC,SAAW,GAEpCpB,EAAQ,CAAEiB,WAAUT,UAEpBU,EAAO,CAAED,WAAUT,S,KAxBhBO,MAAK,SAAAM,G,IAAGJ,EAAQI,EAARJ,SAAUT,EAAKa,EAALb,MACjBc,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAfR,EAAS,QAAYQ,OAANjB,EAAM,M,IAEvEkB,OAAM,SAAAL,G,IAAGJ,EAAQI,EAARJ,SAAUT,EAAKa,EAALb,MAClBc,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAqCF,OAAfR,EAAS,QAAYQ,OAANjB,EAAM,M,IAEpEoB,SAAQ,aACPd,GACSH,GACPd,EAAaa,GAAMK,KAAKC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', submitForm);\n\nfunction delayPromise(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    alert('Please enter valid numeric values.');\n    return;\n  }\n\n  let i = 1;\n\n  function processPromise() {\n    if (i <= amount) {\n      createPromise(i, delay + (i - 1) * step)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n        .finally(() => {\n          i++;\n          if (i <= amount) {\n            delayPromise(step).then(processPromise);\n          }\n        });\n    }\n  }\n\n  delayPromise(delay).then(processPromise);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayPromise","time","Promise","resolve","setTimeout","addEventListener","event","preventDefault","delay1","parseInt","elements","delay","value","step","amount","isNaN","alert","i","then","processPromise","position","reject","Math","random","param","$parcel$interopDefault","Notify","success","concat","catch","failure","finally"],"version":3,"file":"03-promises.1edd86cd.js.map"}